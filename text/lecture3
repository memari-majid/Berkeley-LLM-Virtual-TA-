Lecture 3: Future AI Applications and the AutoGen Framework 
Hello, everyone. Today’s session will cover two main topics: first, what the future AI applications might look like, and second, how we can empower every developer to build these applications using the AutoGen framework. These two questions are central to the future of AI, especially in light of the rapid developments in language models and generative AI.
The Future of AI Applications
Since around 2022, we have witnessed the extraordinary capabilities of generative models, particularly in generating text and images. These new models are far superior to older generative techniques from 15 or 20 years ago. Back then, techniques like topic modeling and other early generative models were groundbreaking. Today, however, we are in a different era, where the power of large language models (LLMs) has opened the door to more creative and advanced applications.
The question that follows is: What’s next? How can we harness the potential of these new AI models to create even more innovative applications? Over the past year, we have made several key technical bets. One of the most important is the idea that the future of AI will be agentic. This means that AI systems will increasingly take the form of agents—autonomous entities that can interact with the digital world and execute complex tasks on behalf of humans.
At first, the idea of agentic AI was met with some skepticism. However, as time passes, we see more evidence supporting this view. Earlier this year, for example, a Berkeley article observed a shift from using simple language models to building more compound AI systems. This aligns with the bets we made regarding the future of AI applications.
Examples of Agentic AI
When we talk about agentic AI, we refer to systems like personal assistants, autonomous bots, and gaming agents. These types of agents are not new. However, the recent advancements in generative AI, particularly language models, have made it much easier to build these systems and dramatically increased their capabilities. We are also seeing new and novel agentic applications that go beyond our previous imaginations, such as science agents that can perform scientific discoveries autonomously, web agents that automate tasks like browsing, and software agents that can build software from scratch.
Let me show you a recent demo from one of my colleagues. The demo features an AI that builds a website by extracting models from Hugging Face and automatically downloading them. The AI starts by analyzing the task, gathering the necessary information, installing dependencies, and using a multi-agent framework to assign tasks to different agents. The agents communicate with each other, and in just a few steps, the website is built. The system can also recover from mistakes, demonstrating a form of self-healing. If a critical line of code is removed, the AI recognizes the error and corrects it. This kind of self-recovery ability shows the potential of agentic AI to revolutionize software development.
The Benefits of Agentic AI
To summarize the key benefits of agentic AI:
1.	Natural Interfaces: AI systems are becoming more capable of understanding and responding to natural language. This allows users to interact with AI in a more intuitive way.
2.	Complex Task Execution: Agents can execute increasingly complex tasks with minimal human supervision, offering enormous potential for automation.
3.	New Software Architecture: Agentic AI introduces a new way to design software. By enabling multiple agents to collaborate on a task, we can build systems that are more flexible, scalable, and capable of handling complex workflows.
Example: Supply Chain Optimization
Let’s look at an example of how agentic AI can be applied to a real-world problem—supply chain optimization in the cloud. In this case, a coffee shop owner might ask, “What happens to my operating costs if I change shipping constraints?” This is a complex question that cannot be answered by a simple chatbot like ChatGPT. Instead, it requires understanding specific data, applying optimization techniques, and interacting with external tools.
Using AutoGen, a system with three agents was built to solve this problem: the commander, the writer, and the safeguard. The user sends a question, and the commander receives it. Before answering, the commander engages the writer, which generates Python code to address the problem. The code is then passed to the safeguard to check for safety. If the code is safe, the commander executes it, and the results are sent back to the user.
This modular, multi-agent workflow ensures that complex tasks are broken down into manageable steps, with each agent performing a specific role. It also highlights the importance of modularity and collaboration among agents in building sophisticated applications.
Building with the AutoGen Framework
Now, let’s discuss how AutoGen enables developers to build agentic AI applications. The framework simplifies the process into two main steps: defining agents and orchestrating their interactions. AutoGen abstracts a wide variety of entities—whether it’s a language model, tool, or human input—into the concept of an agent. Developers can create complex workflows using simple conversation patterns, such as nested chats or group chats, where agents communicate and collaborate to complete tasks.
For example, in a simple setup, a writer agent can write a blog post, while a critic agent reviews it. More complex setups might involve a nested chat where a series of agents—such as SEO, legal, and ethics reviewers—contribute to the final product. This flexibility allows developers to build highly dynamic and adaptive systems.
Another example is using AutoGen to build a conversational chess game. Instead of allowing language models to directly play chess (which often results in illegal moves), a tool-based agent manages the chessboard, ensuring that only valid moves are made. The language models can then focus on generating dialogue while adhering to the rules of the game.
Modular and Flexible Systems
One of the greatest advantages of agentic AI is its modularity. This design makes systems easier to maintain, extend, and adapt. For instance, if you need to replace one agent’s functionality—say, swapping a language model for a human in the loop—it can be done without disrupting the entire system.
Conclusion
Agentic AI represents a promising future for building more advanced, interactive, and capable AI systems. With frameworks like AutoGen, developers can rapidly experiment, iterate, and build novel applications that push the boundaries of what AI can achieve. However, designing such systems requires careful consideration of trade-offs between flexibility, control, and performance. AutoGen provides a unified framework for managing these trade-offs and enables developers to explore new design patterns that can accommodate a wide variety of tasks and applications.
Thank you for your attention, and I look forward to your questions.

